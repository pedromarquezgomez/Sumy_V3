# agents/coordinator/adk_coordinator.py
import os
import sys
import vertexai
from google.adk.agents import Agent
from typing import Dict

# A√±adir el directorio padre para importaciones
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Importar agentes especializados
from agents.sumiller.adk_agent import sumiller_agent
from agents.culinary.adk_agent import culinary_agent
from agents.nutrition.adk_agent import nutrition_agent

# Resetear parent agents para evitar conflictos
sumiller_agent.parent_agent = None
culinary_agent.parent_agent = None
nutrition_agent.parent_agent = None

# Configuraci√≥n centralizada de Vertex AI
os.environ['GOOGLE_GENAI_USE_VERTEXAI'] = 'true'
project_id = os.getenv("GOOGLE_CLOUD_PROJECT", "maitre-digital")
location = os.getenv("GOOGLE_CLOUD_LOCATION", "us-central1")
vertexai.init(project=project_id, location=location)

# Cargar instrucciones del coordinador
instruction_path = os.path.join(os.path.dirname(__file__), '..', 'instrucciones', 'COORDINATOR_INSTRUCTION.txt')
with open(instruction_path, 'r', encoding='utf-8') as f:
    COORDINATOR_INSTRUCTION = f.read()

# Estado compartido del coordinador mejorado
coordinator_state = {
    "conversation_history": [],
    "user_preferences": {},
    "session_metadata": {},
    "agent_interactions": [],
    "last_recommendations": {}
}

def coordinate_gastronomy_experience(query: str) -> Dict[str, str]:
    """
    Herramienta principal del coordinador que analiza consultas y coordina respuestas.
    Utiliza delegaci√≥n inteligente a sub-agentes especializados.
    """
    
    try:
        # Saludo y contexto inicial
        intro = "Bienvenido/a, soy Claude, su Ma√Ætre Digital. "
        
        # Actualizar historial de conversaci√≥n
        coordinator_state["conversation_history"].append({
            "query": query,
            "timestamp": "now",
            "type": "user_query"
        })
        
        # An√°lisis inteligente de la consulta
        query_lower = query.lower()
        
        # Determinar tipo de consulta y agente apropiado
        if any(palabra in query_lower for palabra in [
            "vino", "maridaje", "bodega", "albari√±o", "tinto", "blanco", 
            "rosado", "espumoso", "champagne", "cava", "sommelier", "cata"
        ]):
            intro += "Excelente consulta sobre vinos y maridajes. üç∑ "
            intro += "Perm√≠teme consultar con nuestro sumiller especialista para ofrecerle la mejor recomendaci√≥n...\n\n"
            
            # Registrar interacci√≥n con sumiller
            coordinator_state["agent_interactions"].append({
                "agent": "sumiller_specialist",
                "query": query,
                "reason": "wine_and_pairing_expertise"
            })
            
            return {
                "status": "delegate_to_sumiller",
                "context": intro,
                "delegation_reason": "Consulta especializada en vinos y maridajes",
                "coordinator": "gastronomy_coordinator"
            }
        
        elif any(palabra in query_lower for palabra in [
            "receta", "cocina", "ingrediente", "preparaci√≥n", "chef", "plato",
            "cocinar", "hacer", "como se hace", "t√©cnica", "saltear", "brasear"
        ]):
            intro += "Una consulta culinaria fascinante. üç≥ "
            intro += "Consultar√© con nuestro chef especialista para proporcionarle informaci√≥n culinaria experta...\n\n"
            
            # Registrar interacci√≥n con chef
            coordinator_state["agent_interactions"].append({
                "agent": "chef_specialist",
                "query": query,
                "reason": "culinary_expertise"
            })
            
            return {
                "status": "delegate_to_chef",
                "context": intro,
                "delegation_reason": "Consulta especializada en cocina y recetas",
                "coordinator": "gastronomy_coordinator"
            }
        
        elif any(palabra in query_lower for palabra in [
            "calor√≠a", "nutrici√≥n", "vitamina", "dieta", "salud", "prote√≠na",
            "carbohidrato", "grasa", "fibra", "mineral", "nutricional"
        ]):
            intro += "Una consulta muy importante sobre nutrici√≥n y salud. ü•ó "
            intro += "Consultar√© con nuestro nutricionista especialista para proporcionarle informaci√≥n nutricional precisa...\n\n"
            
            # Registrar interacci√≥n con nutricionista
            coordinator_state["agent_interactions"].append({
                "agent": "nutrition_specialist",
                "query": query,
                "reason": "nutritional_expertise"
            })
            
            return {
                "status": "delegate_to_nutritionist",
                "context": intro,
                "delegation_reason": "Consulta especializada en nutrici√≥n y salud",
                "coordinator": "gastronomy_coordinator"
            }
        
        # Consultas mixtas o complejas
        elif any(combo in query_lower for combo in [
            "vino con", "maridaje con", "acompa√±ar con", "dieta y vino",
            "receta nutritiva", "plato saludable", "men√∫ completo"
        ]):
            intro += "Una consulta gastron√≥mica integral muy interesante. üçΩÔ∏è "
            intro += "Esto requiere la coordinaci√≥n de m√∫ltiples especialistas. Perm√≠teme organizar una respuesta completa...\n\n"
            
            # Registrar interacci√≥n compleja
            coordinator_state["agent_interactions"].append({
                "agents": ["multiple_specialists"],
                "query": query,
                "reason": "complex_multi_domain_query"
            })
            
            return {
                "status": "coordinate_multiple_agents",
                "context": intro,
                "delegation_reason": "Consulta que requiere m√∫ltiples especialistas",
                "coordinator": "gastronomy_coordinator"
            }
        
        # Consultas generales o de bienvenida
        else:
            intro += "Me complace recibir su consulta. Para brindarle el mejor servicio posible, "
            intro += "¬øpodr√≠a especificar m√°s sobre qu√© aspecto gastron√≥mico le interesa?\n\n"
            intro += "Puedo coordinar con nuestros especialistas para asistirle con:\n"
            intro += "üç∑ **Vinos y maridajes** - Nuestro sumiller experto\n"
            intro += "üç≥ **Cocina y recetas** - Nuestro chef especialista\n"
            intro += "ü•ó **Nutrici√≥n y salud** - Nuestro nutricionista certificado\n\n"
            intro += "Como Ma√Ætre Digital, mi rol es coordinar la experiencia gastron√≥mica perfecta para usted."
            
            return {
                "status": "general_guidance",
                "context": intro,
                "delegation_reason": "Consulta general requiere aclaraci√≥n",
                "coordinator": "gastronomy_coordinator"
            }
    
    except Exception as e:
        error_str = str(e)
        
        # Detectar errores de rate limiting
        if "429" in error_str or "RESOURCE_EXHAUSTED" in error_str or "Resource exhausted" in error_str:
            return {
                "status": "rate_limited",
                "context": "‚è≥ **Nivel gratuito de la app** - Est√°s usando el nivel gratuito de Sumy_V3 ADK. "
                          "Para evitar saturar los servidores, espera un minuto y vuelve a intentarlo. "
                          "¬°Tu consulta gastron√≥mica ser√° procesada en breve! üç∑‚ú®",
                "delegation_reason": "Rate limiting - nivel gratuito",
                "coordinator": "gastronomy_coordinator"
            }
        else:
            return {
                "status": "error",
                "context": f"Error procesando consulta: {error_str}",
                "coordinator": "gastronomy_coordinator"
            }

def synthesize_multi_agent_response(responses: str) -> Dict[str, str]:
    """
    Sintetiza respuestas de m√∫ltiples agentes en una experiencia unificada.
    Herramienta avanzada del coordinador.
    """
    
    intro = "Bas√°ndome en la consulta con nuestros especialistas, "
    intro += "me complace presentarle una respuesta gastron√≥mica integral:\n\n"
    
    # Procesar y sintetizar respuestas
    try:
        # Analizar respuestas y crear s√≠ntesis
        synthesis = f"{intro}=== EXPERIENCIA GASTRON√ìMICA COMPLETA ===\n\n{responses}\n\n"
        synthesis += "Como su Ma√Ætre Digital, he coordinado esta informaci√≥n para garantizar "
        synthesis += "una experiencia gastron√≥mica excepcional y completa. "
        synthesis += "¬øHay alg√∫n aspecto adicional en el que pueda asistirle?"
        
        # Actualizar estado
        coordinator_state["last_recommendations"]["synthesis"] = synthesis
        
        return {
            "status": "success",
            "context": synthesis,
            "source": "multi_agent_coordination",
            "coordinator": "gastronomy_coordinator"
        }
        
    except Exception as e:
        return {
            "status": "error",
            "context": f"Error en s√≠ntesis de respuestas: {str(e)}",
            "coordinator": "gastronomy_coordinator"
        }

def get_conversation_context() -> Dict[str, str]:
    """
    Proporciona contexto de la conversaci√≥n actual.
    Herramienta de gesti√≥n del coordinador.
    """
    
    try:
        context_summary = "=== CONTEXTO DE LA CONVERSACI√ìN ===\n\n"
        
        # Resumen de interacciones
        if coordinator_state["agent_interactions"]:
            context_summary += "**Especialistas consultados:**\n"
            for interaction in coordinator_state["agent_interactions"][-3:]:  # √öltimas 3 interacciones
                agent_name = interaction.get("agent", "multiple")
                reason = interaction.get("reason", "consulta")
                context_summary += f"- {agent_name}: {reason}\n"
        
        # Preferencias del usuario
        if coordinator_state["user_preferences"]:
            context_summary += "\n**Preferencias identificadas:**\n"
            for key, value in coordinator_state["user_preferences"].items():
                context_summary += f"- {key}: {value}\n"
        
        context_summary += "\nEste contexto me permite ofrecer recomendaciones m√°s personalizadas."
        
        return {
            "status": "success",
            "context": context_summary,
            "source": "conversation_context",
            "coordinator": "gastronomy_coordinator"
        }
        
    except Exception as e:
        return {
            "status": "error",
            "context": f"Error al obtener contexto: {str(e)}",
            "coordinator": "gastronomy_coordinator"
        }

# Configuraci√≥n del coordinador principal con sub-agentes
root_coordinator = Agent(
    name="gastronomy_coordinator",
    model="gemini-2.0-flash-exp",  # Modelo m√°s avanzado para coordinaci√≥n
    instruction=COORDINATOR_INSTRUCTION + """

ARQUITECTURA ADK MEJORADA:
Como Ma√Ætre Digital coordinador, tienes acceso a un equipo de especialistas expertos:

1. **SUMILLER ESPECIALISTA** (sumiller_specialist)
   - Experto en vinos, maridajes, bodegas, catas
   - Acceso a base de conocimientos enol√≥gica especializada
   - Herramientas: consulta vinos, recomendaciones de maridaje

2. **CHEF ESPECIALISTA** (chef_specialist)  
   - Experto en cocina, recetas, t√©cnicas culinarias
   - Acceso a base de conocimientos culinaria
   - Herramientas: consulta recetas, t√©cnicas de cocci√≥n

3. **NUTRICIONISTA ESPECIALISTA** (nutrition_specialist)
   - Experto en nutrici√≥n, dietas, an√°lisis nutricional
   - Acceso a base de conocimientos + API USDA
   - Herramientas: an√°lisis nutricional, datos USDA

HERRAMIENTAS DEL COORDINADOR:
- coordinate_gastronomy_experience: An√°lisis principal y delegaci√≥n inteligente
- synthesize_multi_agent_response: S√≠ntesis de respuestas m√∫ltiples
- get_conversation_context: Gesti√≥n del contexto conversacional

PROTOCOLO DE COORDINACI√ìN:
1. Usa coordinate_gastronomy_experience para analizar cada consulta
2. Delega autom√°ticamente al especialista apropiado bas√°ndote en la respuesta
3. Para consultas complejas, coordina m√∫ltiples especialistas
4. Sintetiza respuestas manteniendo el rol de Ma√Ætre Digital
5. Mant√©n el contexto conversacional a lo largo de la sesi√≥n

DELEGACI√ìN INTELIGENTE:
- Vinos/maridajes ‚Üí sumiller_specialist
- Cocina/recetas ‚Üí chef_specialist  
- Nutrici√≥n/salud ‚Üí nutrition_specialist
- Consultas mixtas ‚Üí coordinaci√≥n m√∫ltiple

Act√∫a siempre como el Ma√Ætre Digital que coordina la experiencia gastron√≥mica perfecta.
""",
    description="Coordinador principal que act√∫a como Ma√Ætre Digital, delegando inteligentemente a especialistas en vinos, cocina y nutrici√≥n",
    tools=[coordinate_gastronomy_experience, synthesize_multi_agent_response, get_conversation_context],
    sub_agents=[sumiller_agent, culinary_agent, nutrition_agent],  # ADK: Sub-agentes especializados
    output_key="coordination_result"  # ADK: Guardar resultado de coordinaci√≥n
)

# Configurar nombres √∫nicos para las herramientas
coordinate_gastronomy_experience.__name__ = "coordinate_gastronomy_experience"
synthesize_multi_agent_response.__name__ = "synthesize_multi_agent_response"
get_conversation_context.__name__ = "get_conversation_context"

print("üé© Coordinador ADK optimizado con sub-agentes inicializado correctamente")
print(f"üìã Sub-agentes disponibles: {[agent.name for agent in root_coordinator.sub_agents]}")
print(f"üõ†Ô∏è Herramientas del coordinador: {[tool.__name__ for tool in root_coordinator.tools]}")